一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一

Shadowsocks工作流程如下

                            [加密通讯]
[client app]  ==>  [ss-local]  ==>  [ss-server]  ==>  [remote]
         [socks5协议]

本地搭建一个socks5代理服务器，将本地流量转发到远程服务器，事实上socks5只是为了使用
方便，理论上任何UDP和TCP流量都可用通过ss服务器转发，shadowsocks协议主要包括两个
部分，一个是加密方式，一个是地址解析的部分。要假设有一个数据包[data]要发送给远程服务
器[remote]，那么[ss-local]做如下的工作:

打包数据，加上远程地址
                      #加密数据                        附加上随机密钥
                                          （可能是IV也可能是salt，但其实都是一样）
[remote][data]==>[encrypted[remote][data]]==>[salt][encrypted[remote][data]]

当然地址是在首次打开的时候需要添加进去，之后直接发送包即可，shadowsocks有两种加
密类型，分为stream和AEAD加密，先讲一下stream加密流程，引用ss官方说明，下面代码
只是说明需要，后面我会贴出所用到算法的具体代码，需要两个参数：IV和key

        Stream_encrypt(key, IV, message) => ciphertext

对应的解密函数就是：

        Stream_decrypt(key, IV, ciphertext) => message

以服务端为例，解密过程中，IV从客户端读取，TCP连接创建后头16个字节就是IV（chacha20
-ietf是12个字节），然后自己生成一个随机IV用于加密数据，并且将这个IV发送给客户端，每
个TCP回话对应2个IV。key由用户密码生成，使用

        EVP_BytesToKey(password,length) => key

stream加密解密流程差不多就是这样子了，AEAD相对stream安全，也相对比较复杂。

使用AEAD加密的TCP通讯数据包结构如下：

        [salt][chunk][chunk][chunk]...

[chunk]结果如下

    [encrypted payload length][length tag][encrypted payload][payload tag]

AEAD加密时候会生成校验数据，[data]加密后会生成[encrypted data][tag]的形式，长度会比
原来数据多出16个字节（并不一定，目前常见算法都是16位），加密和解密参考ss官网说明:
参数subkey，nonce。

        AE_encrypt(subkey, nonce, message) => (ciphertext, tag)

相应的解密函数

        AE_decrypt(subkey, nonce, ciphertext, tag) => message

subkey参数和stream中的key不一样，stream加密方式全程使用同一个key，在AEAD加密的协
议里面每个TCP连接都要生成新的子密钥

        HKDF_SHA1(EVP_BytesToKey(password,length) , salt, info) => subkey

info是固定的'ss-subkey'，length可以在ss官网查询，salt对应的是TCP会话建立后马上发送过
来，具体长度也是查表，这里的salt和stream里面的IV类似，也是客户端和服务端各生成一个
用于加密，并且发送给对方，每个TCP对话发送一次。

nonce参数是固定长度的字符，小端结构（与我们正常阅读习惯相反的结构），由0开始，每个
TCP对话也是对应2个nonce，解密客户端数据一个nonce，解密发送给客户端数据一个nonce，
由[chunk]的结构可以知道，每个块加解密都需要两次，一次是负载长度，一次是负载，所以每
次发送或者从客户端读取数据总共需要把nonce加上二（不是一次性加二，而是每次调用
AE_encrypt/AE_decrypt对应的nonce加上一）。

说一下地址解析部分，当然这些是解密后的数据：

        [1-byte type][variable-length host][2-byte port]

和socks5协议里面地址是一样的。